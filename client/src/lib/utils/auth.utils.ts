import jwtDecode from "jwt-decode";

/**
 * Parses provider access token and returns properly
 * formatted user info if matching account is found.
 *
 * @param provider Authentication provider.
 * @param accessToken Access token generated by the provider.
 * @returns Parsed profile data for given user.
 */
export function parseAuthData(provider: string, accessToken: string) {
	const data = jwtDecode(accessToken);
	switch (provider) {
		case "google":
			return parseGoogleData(data);
		case "github":
			return parseGithubData(data);
		case "facebook":
			return parseFacebookData(data);
		case "linkedin":
			return parseLinkedinData(data);
	}
}

/**
 * Parses Google specific data.
 *
 * @param data Google specific decoded data.
 * @returns Properly formatted object from said data.
 */
function parseGoogleData(data: any) {
	const { email, given_name, family_name, picture } = data;
	return {
		email: email,
		firstName: given_name,
		lastName: family_name,
		image: picture,
	};
}

/**
 * Parses Github specific data.
 *
 * @param data Github specific decoded data.
 * @returns Properly formatted object from said data.
 */
function parseGithubData(data: any) {
	const { email, name, avatar_url } = data;
	return {
		email: email,
		firstName: name.split(" ")[0],
		lastName: name.split(" ")[1],
		image: avatar_url,
	};
}

/**
 * Parses Facebook specific data.
 *
 * @param data Facebook specific decoded data.
 * @returns Properly formatted object from said data.
 */
function parseFacebookData(data: any) {
	const { email, first_name, last_name, picture } = data;
	return {
		email: email,
		firstName: first_name,
		lastName: last_name,
		image: picture.data.url,
	};
}

/**
 * Parses LinkedIn specific data.
 *
 * @param data LinkedIn specific decoded data.
 * @returns Properly formatted object from said data.
 */
function parseLinkedinData(data: any) {
	const { emails, name, photos } = data;
	return {
		email: emails[0].value,
		firstName: name.givenName,
		lastName: name.familyName,
		image: photos[3].value,
	};
}
